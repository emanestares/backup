

recurrence relation 
- equation or an inequality that describes a function in terms of its value on smaller inputs

f(n) = n * f(n-1) , if n > 0

how to get T(n) of a recursive function
- merge sort
 - t(n) = t(n/2) + t(n/2) + n
	- T(n) = 2T(n/2) + n

Iteration method
	- expand the recurrence and express it as a summation of terms

	T(n) = n + 2T(n/2)

	T(_) = _ + 2T(_/2)

	T(n/2) = n/2 + 2T(n/2/2)
	
	T(n) = n + 2(n/2) + 4T(n/4)
	T(n/4) = n/4 + 2T(n/4/2)
	
	- up to n / n

	- how far must we iterate?:
	
		until the ith term is 2^i ( n/2^i) 
		where n/2^i = 1
		i = log of n base 2

	T(n) = n + 2(n/2) + 4(n/4) + 8(n/4) ... + 2^log n (n/2^logn)

	= summation of n from i = 0 log n - > [n log n]
	-> N LOG N


log xy base b = log x base b + log y base b
log x^y = y log x
a^log of n base b = n ^ log of a base b

Recursion Trees
- convenient way of visualizing the iteration method

	T(n) = aT(n/b) + f(n)

	where: 
		a = number of subproblems
		n/b = size of each subproblem
		f(n) = cost

	T(n) = 2T(n/2) + n
	= n = [t(n/2) , t(n/2)]
	= n = [n/2, n/2] = [t(n/4), t(n/4)] , [t(n/4), t(n/4)]
	= n = [n/2, n/2] = [n/4, n/4], [n/4, n/4] 
	...
	= n/n = 1

	= compute every level
	-> every level is n
	-> log n levels
	-> height of Tree = log of n base b

		-> * if the form is standard form
	-> log n base 2 = n log n



